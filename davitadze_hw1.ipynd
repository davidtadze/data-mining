{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Общая информация**\n",
    "\n",
    "**Срок сдачи:** 20 марта 2019, 06:00 <br\\>\n",
    "**Штраф за опоздание:** -1 балл после 06:00 20 марта, -2 балла после 06:00 27 марта, -3 балла после 06:00 3 апреля\n",
    "-4 балла после 06:00 10 апреля\n",
    "\n",
    "При отправлении ДЗ указывайте фамилию в названии файла\n",
    "Присылать ДЗ необходимо в виде ссылки на свой github репозиторий в slack @alkhamush\n",
    "\n",
    "Необходимо в slack скинуть ссылку в личный чат @alkhamush\n",
    "Пример ссылки:\n",
    "https://github.com/stroykova/spheremailru/stroykova_hw1.ipynb \n",
    "\n",
    "\n",
    "Используйте данный Ipython Notebook при оформлении домашнего задания."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Задание 1 (2 баллов)\n",
    "Реализовать KNN в классе MyKNeighborsClassifier (обязательное условие: точность не ниже sklearn реализации)\n",
    "Разберитесь самостоятельно, какая мера расстояния используется в KNeighborsClassifier дефолтно и реализуйте свой алгоритм именно с этой мерой. Самостоятельно разберитесь, как считается score из KNeighborsClassifier и реализуйте аналог в своём классе. Score не должен уступать значению KNN из sklearn\n",
    "\n",
    "###### Задание 2 (2 балла)\n",
    "Добиться скорости работы на fit,  predict и predict_proba сравнимой со sklearn для iris и mnist\n",
    "Для этого используем numpy\n",
    "\n",
    "###### Задание 3 (2 балла)\n",
    "Для iris найдите такой параметр n_neighbors, при котором выдаётся наилучший score. Нарисуйте график зависимости score от n_neighbors\n",
    "\n",
    "###### Задание 4 (3 балла)\n",
    "Добавить algorithm='kd_tree' в реализацию KNN (использовать KDTree из sklearn.neighbors). Добиться скорости работы на fit,  predict и predict_proba сравнимой со sklearn для iris и mnist\n",
    "Для этого используем numpy. Score не должен уступать значению KNN из sklearn\n",
    "\n",
    "###### Задание 5 (1 балла)\n",
    "Описать для чего нужны следующие библиотеки/классы/функции (список будет ниже)\n",
    "\n",
    "**Штрафные баллы:**\n",
    "\n",
    "1. Невыполнение PEP8 -0.5 баллов\n",
    "2. Отсутствие фамилии в имени скрипта (скрипт должен называться по аналогии со stroykova_hw1.ipynb) -0.5 баллов\n",
    "3. Все строчки должны быть выполнены. Нужно, чтобы output команды можно было увидеть уже в git'е. В противном случае -0.5 баллов\n",
    "4. При оформлении ДЗ нужно пользоваться данным файлом в качестве шаблона. Не нужно удалять и видоизменять структуру кода и текст. В противном случае -0.5 баллов\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import seaborn as sns\n",
    "from sklearn import datasets\n",
    "from sklearn.base import ClassifierMixin\n",
    "from sklearn.datasets import fetch_mldata\n",
    "from sklearn.neighbors.base import NeighborsBase, KNeighborsMixin, SupervisedIntegerMixin \n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "%load_ext pycodestyle_magic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#%%pycodestyle\n",
    "\n",
    "from scipy.spatial.distance import cdist\n",
    "from sklearn.preprocessing import normalize\n",
    "from scipy.stats import mode\n",
    "\n",
    "from scipy.spatial import KDTree\n",
    "\n",
    "class MyKNeighborsClassifier(NeighborsBase, KNeighborsMixin, SupervisedIntegerMixin, ClassifierMixin):\n",
    "    \n",
    "    def __init__(self, n_neighbors, algorithm='brute'):\n",
    "        self.neighbors = n_neighbors\n",
    "        self.algorithm = algorithm\n",
    "    \n",
    "    def fit(self, X, y):\n",
    "        if self.algorithm == 'kd_tree':\n",
    "            self.data = KDTree(X)\n",
    "        else:\n",
    "            self.data = X\n",
    "        \n",
    "        self.labels = y\n",
    "    \n",
    "    def predict(self, X):\n",
    "        if self.algorithm == 'kd_tree':\n",
    "            indexes = self.data.query(X, k=self.neighbors)[1]\n",
    "            \n",
    "            # make a list of k neighbors targets\n",
    "            k_nearest = self.labels[indexes].T\n",
    "            \n",
    "            # return most common values\n",
    "            # numpy changes dtype of k_nearest to \"np.ndarray\" so workaround .astype(type(self.labels[0])\n",
    "            return mode(k_nearest.astype(type(self.labels[0])), axis=0)[0]\n",
    "        else:\n",
    "            # calculate distances\n",
    "            distances = cdist(self.data, X)\n",
    "\n",
    "            # make a list of k neighbors targets\n",
    "            indexes = np.argpartition(distances, self.neighbors, axis=0)\n",
    "            \n",
    "            k_nearest = self.labels[indexes[:self.neighbors]]\n",
    "\n",
    "            # return most common values\n",
    "            # numpy changes dtype of k_nearest to \"np.ndarray\" so workaround .astype(type(self.labels[0])\n",
    "            return mode(k_nearest.astype(type(self.labels[0])), axis=0)[0]\n",
    "        \n",
    "    def predict_proba(self, X):\n",
    "        if self.algorithm == 'kd_tree':\n",
    "            indexes = self.data.query(X, k=self.neighbors)[1]\n",
    "            \n",
    "            k_nearest = self.labels[indexes]\n",
    "            \n",
    "        else:\n",
    "            # calculate distances\n",
    "            distances = cdist(self.data, X)\n",
    "\n",
    "            # make a list of k neighbors targets\n",
    "            indexes = np.argpartition(distances, self.neighbors, axis=0)\n",
    "            k_nearest = self.labels[indexes[:self.neighbors]]\n",
    "        \n",
    "        unique = []\n",
    "        pos = []\n",
    "        \n",
    "        for column in np.arange(0, k_nearest.shape[1]):\n",
    "            cur_unique, cur_pos = np.unique(k_nearest[:, column], return_inverse=True)\n",
    "            unique.append(cur_unique)\n",
    "            pos.append(cur_pos)\n",
    "\n",
    "        counts = np.asarray(list(map(lambda x: np.bincount(x), pos)))\n",
    "    \n",
    "        all_classes = np.unique(self.labels)\n",
    "        all_rows = np.arange(0, X.shape[0])\n",
    "        \n",
    "        probabilities = []\n",
    "        for row in all_rows:\n",
    "            cur_probabilities = {key: 0 for key in all_classes}\n",
    "            for cur_unique, cur_count in zip(unique[row], counts[row]):\n",
    "                cur_probabilities[cur_unique] = cur_count\n",
    "                \n",
    "            probabilities.append((list(map(float, cur_probabilities.values()))))\n",
    "            \n",
    "        # normalize before returning\n",
    "        return np.asarray(probabilities) / np.asarray(probabilities).sum(axis=1, keepdims=True)\n",
    "    \n",
    "    def score(self, X, y):\n",
    "        return (self.predict(X) == y).sum() / y.size"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**IRIS**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris = datasets.load_iris()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.1, stratify=iris.target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = KNeighborsClassifier(n_neighbors=2, algorithm='brute')\n",
    "my_clf = MyKNeighborsClassifier(n_neighbors=2, algorithm='brute')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.1 ms, sys: 445 µs, total: 1.55 ms\n",
      "Wall time: 1.16 ms\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='brute', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=None, n_neighbors=2, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 8 µs, sys: 0 ns, total: 8 µs\n",
      "Wall time: 12.2 µs\n"
     ]
    }
   ],
   "source": [
    "%time my_clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2.88 ms, sys: 1.81 ms, total: 4.69 ms\n",
      "Wall time: 4.6 ms\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([2, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 1, 2, 1, 2])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2.11 ms, sys: 1.39 ms, total: 3.51 ms\n",
      "Wall time: 2.31 ms\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[2, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 1, 2, 1, 2]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time my_clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.16 ms, sys: 596 µs, total: 1.76 ms\n",
      "Wall time: 1.21 ms\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0. , 0. , 1. ],\n",
       "       [0. , 0. , 1. ],\n",
       "       [0. , 0. , 1. ],\n",
       "       [1. , 0. , 0. ],\n",
       "       [1. , 0. , 0. ],\n",
       "       [1. , 0. , 0. ],\n",
       "       [1. , 0. , 0. ],\n",
       "       [1. , 0. , 0. ],\n",
       "       [0. , 0. , 1. ],\n",
       "       [0. , 1. , 0. ],\n",
       "       [0. , 0.5, 0.5],\n",
       "       [0. , 1. , 0. ],\n",
       "       [0. , 0. , 1. ],\n",
       "       [0. , 1. , 0. ],\n",
       "       [0. , 0. , 1. ]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time clf.predict_proba(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2.45 ms, sys: 1.94 ms, total: 4.39 ms\n",
      "Wall time: 3.12 ms\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0. , 0. , 1. ],\n",
       "       [0. , 0. , 1. ],\n",
       "       [0. , 0. , 1. ],\n",
       "       [1. , 0. , 0. ],\n",
       "       [1. , 0. , 0. ],\n",
       "       [1. , 0. , 0. ],\n",
       "       [1. , 0. , 0. ],\n",
       "       [1. , 0. , 0. ],\n",
       "       [0. , 0. , 1. ],\n",
       "       [0. , 1. , 0. ],\n",
       "       [0. , 0.5, 0.5],\n",
       "       [0. , 1. , 0. ],\n",
       "       [0. , 0. , 1. ],\n",
       "       [0. , 1. , 0. ],\n",
       "       [0. , 0. , 1. ]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time my_clf.predict_proba(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_clf.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "highest score is at 1 neighbors\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize= (14,8))\n",
    "ax = plt.subplot(111)\n",
    "\n",
    "ax.set_xlabel('n_neighbors')\n",
    "ax.set_ylabel('score')\n",
    "\n",
    "scores = []\n",
    "neighbors = np.arange(1,X_train.shape[0])\n",
    "for neighbor in neighbors:\n",
    "    my_clf = MyKNeighborsClassifier(n_neighbors=neighbor, algorithm='brute')\n",
    "    cur_scores = np.empty(10)\n",
    "    \n",
    "    # calculate mean score\n",
    "    fold = 10\n",
    "    for i in range(0, fold):\n",
    "        # handmade k-fold cross validation\n",
    "        X_train, a, y_train, b = train_test_split(iris.data, iris.target, test_size=0.1, stratify=iris.target)\n",
    "        my_clf.fit(X_train, y_train)\n",
    "        \n",
    "        cur_scores[i] = my_clf.score(X_test, y_test)\n",
    "    \n",
    "    scores.append(cur_scores.mean())\n",
    "\n",
    "plt.plot(neighbors, scores)\n",
    "\n",
    "optimal_n = neighbors[scores.index(max(scores))]\n",
    "print(\"highest score is at %d neighbors\" % optimal_n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**MNIST**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import fetch_openml\n",
    "\n",
    "mnist = fetch_openml('mnist_784')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(mnist.data, mnist.target, test_size=0.01, stratify=mnist.target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = KNeighborsClassifier(n_neighbors=2, algorithm='brute')\n",
    "my_clf = MyKNeighborsClassifier(n_neighbors=2, algorithm='brute')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 167 ms, sys: 2.6 ms, total: 170 ms\n",
      "Wall time: 169 ms\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='brute', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=None, n_neighbors=2, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 8 µs, sys: 0 ns, total: 8 µs\n",
      "Wall time: 11.7 µs\n"
     ]
    }
   ],
   "source": [
    "%time my_clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3.32 s, sys: 283 ms, total: 3.6 s\n",
      "Wall time: 2.19 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array(['1', '9', '4', '7', '9', '5', '1', '3', '7', '5', '3', '9', '9',\n",
       "       '6', '1', '9', '2', '3', '2', '1', '6', '6', '4', '2', '2', '3',\n",
       "       '6', '8', '0', '3', '6', '3', '5', '3', '8', '5', '3', '5', '9',\n",
       "       '5', '4', '0', '9', '1', '1', '4', '8', '1', '6', '9', '5', '0',\n",
       "       '6', '0', '4', '6', '1', '9', '4', '8', '7', '9', '1', '6', '5',\n",
       "       '2', '0', '8', '7', '4', '6', '1', '9', '3', '4', '2', '8', '5',\n",
       "       '7', '8', '9', '4', '2', '0', '3', '6', '1', '3', '8', '9', '4',\n",
       "       '9', '5', '7', '1', '1', '1', '9', '9', '3', '1', '7', '8', '6',\n",
       "       '1', '7', '4', '4', '4', '1', '9', '6', '6', '6', '5', '1', '4',\n",
       "       '2', '3', '0', '0', '5', '7', '8', '7', '6', '3', '6', '2', '6',\n",
       "       '9', '7', '0', '2', '6', '7', '2', '9', '1', '2', '0', '5', '5',\n",
       "       '1', '5', '0', '9', '9', '2', '1', '6', '9', '6', '7', '3', '0',\n",
       "       '2', '7', '7', '5', '2', '5', '4', '8', '4', '2', '3', '0', '1',\n",
       "       '0', '1', '8', '5', '4', '2', '3', '5', '9', '3', '0', '1', '2',\n",
       "       '6', '6', '0', '6', '8', '8', '6', '7', '4', '7', '4', '1', '8',\n",
       "       '7', '8', '3', '6', '1', '6', '5', '9', '1', '9', '6', '7', '1',\n",
       "       '1', '6', '8', '2', '7', '1', '0', '2', '5', '1', '0', '1', '4',\n",
       "       '9', '4', '4', '7', '4', '6', '0', '0', '7', '4', '8', '5', '7',\n",
       "       '3', '8', '2', '9', '1', '9', '6', '7', '2', '2', '1', '8', '5',\n",
       "       '9', '1', '0', '9', '2', '8', '5', '3', '4', '0', '3', '4', '4',\n",
       "       '4', '3', '0', '2', '8', '5', '3', '2', '0', '8', '2', '9', '0',\n",
       "       '8', '3', '7', '0', '5', '8', '9', '3', '2', '5', '5', '1', '4',\n",
       "       '2', '7', '4', '1', '0', '8', '1', '6', '9', '8', '8', '4', '2',\n",
       "       '4', '0', '9', '2', '0', '7', '0', '3', '0', '6', '4', '4', '4',\n",
       "       '9', '2', '4', '2', '8', '6', '9', '6', '5', '5', '2', '7', '0',\n",
       "       '7', '0', '5', '0', '0', '9', '6', '6', '4', '7', '9', '4', '2',\n",
       "       '7', '4', '9', '3', '8', '8', '7', '1', '5', '3', '5', '5', '4',\n",
       "       '1', '0', '9', '9', '0', '5', '1', '6', '6', '9', '7', '2', '1',\n",
       "       '4', '8', '7', '1', '4', '8', '9', '2', '3', '8', '1', '6', '3',\n",
       "       '1', '2', '8', '3', '4', '0', '1', '8', '8', '4', '2', '8', '1',\n",
       "       '2', '3', '2', '7', '7', '3', '3', '6', '3', '1', '8', '4', '7',\n",
       "       '2', '3', '4', '6', '9', '7', '8', '8', '1', '5', '1', '3', '2',\n",
       "       '8', '0', '5', '4', '9', '6', '9', '6', '7', '0', '9', '4', '5',\n",
       "       '0', '9', '1', '3', '1', '1', '5', '9', '2', '9', '1', '9', '3',\n",
       "       '4', '7', '5', '0', '9', '4', '7', '7', '1', '0', '6', '2', '5',\n",
       "       '7', '9', '1', '7', '0', '4', '0', '7', '0', '2', '8', '5', '0',\n",
       "       '0', '5', '6', '9', '2', '2', '2', '5', '1', '4', '1', '0', '6',\n",
       "       '9', '6', '1', '4', '2', '3', '6', '5', '3', '6', '7', '0', '7',\n",
       "       '7', '3', '2', '9', '9', '8', '8', '5', '1', '7', '2', '1', '5',\n",
       "       '7', '1', '1', '6', '7', '5', '4', '9', '4', '9', '2', '9', '3',\n",
       "       '1', '6', '3', '0', '6', '7', '9', '1', '8', '5', '0', '8', '1',\n",
       "       '0', '8', '8', '6', '6', '1', '2', '4', '4', '5', '6', '0', '7',\n",
       "       '1', '1', '3', '5', '1', '3', '8', '2', '7', '4', '3', '9', '4',\n",
       "       '3', '3', '3', '0', '5', '7', '8', '6', '2', '2', '8', '2', '2',\n",
       "       '4', '5', '2', '6', '7', '2', '0', '9', '1', '8', '7', '4', '0',\n",
       "       '7', '5', '3', '2', '1', '0', '1', '7', '4', '3', '0', '4', '7',\n",
       "       '1', '8', '1', '8', '3', '7', '3', '6', '3', '5', '6', '6', '0',\n",
       "       '6', '3', '7', '0', '0', '2', '0', '3', '1', '8', '5', '6', '2',\n",
       "       '0', '9', '3', '6', '8', '7', '0', '0', '1', '2', '6', '6', '4',\n",
       "       '5', '3', '3', '5', '5', '2', '3', '2', '6', '9', '0', '4', '5',\n",
       "       '9', '9', '8', '7', '0', '4', '2', '5', '7', '5', '8', '0', '2',\n",
       "       '0', '8', '9', '3', '8', '2', '7', '2', '6', '2', '0', '1', '9',\n",
       "       '4', '9', '7', '7', '7', '1', '3', '4', '1', '8', '6', '4', '2',\n",
       "       '6', '7', '3', '1', '7', '3', '3', '1', '3', '9', '3'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 41 s, sys: 907 ms, total: 41.9 s\n",
      "Wall time: 42.4 s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/scipy/stats/stats.py:248: RuntimeWarning: The input array could not be properly checked for nan values. nan values will be ignored.\n",
      "  \"values. nan values will be ignored.\", RuntimeWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([['1', '9', '4', '7', '9', '5', '1', '3', '7', '5', '3', '9', '9',\n",
       "        '6', '1', '9', '2', '3', '2', '1', '6', '6', '4', '2', '2', '3',\n",
       "        '6', '8', '0', '3', '6', '3', '5', '3', '8', '5', '3', '5', '9',\n",
       "        '5', '4', '0', '9', '1', '1', '4', '8', '1', '6', '9', '5', '0',\n",
       "        '6', '0', '4', '6', '1', '9', '4', '8', '7', '9', '1', '6', '5',\n",
       "        '2', '0', '8', '7', '4', '6', '1', '9', '3', '4', '2', '8', '5',\n",
       "        '7', '8', '9', '4', '2', '0', '3', '6', '1', '3', '8', '9', '4',\n",
       "        '9', '5', '7', '1', '1', '1', '9', '9', '3', '1', '7', '8', '6',\n",
       "        '1', '7', '4', '4', '4', '1', '9', '6', '6', '6', '5', '1', '4',\n",
       "        '2', '3', '0', '0', '5', '7', '8', '7', '6', '3', '6', '2', '6',\n",
       "        '9', '7', '0', '2', '6', '7', '2', '9', '1', '2', '0', '5', '5',\n",
       "        '1', '5', '0', '9', '9', '2', '1', '6', '9', '6', '7', '3', '0',\n",
       "        '2', '7', '7', '5', '2', '5', '4', '8', '4', '2', '3', '0', '1',\n",
       "        '0', '1', '8', '5', '4', '2', '3', '5', '9', '3', '0', '1', '2',\n",
       "        '6', '6', '0', '6', '8', '8', '6', '7', '4', '7', '4', '1', '8',\n",
       "        '7', '8', '3', '6', '1', '6', '5', '9', '1', '9', '6', '7', '1',\n",
       "        '1', '6', '8', '2', '7', '1', '0', '2', '5', '1', '0', '1', '4',\n",
       "        '9', '4', '4', '7', '4', '6', '0', '0', '7', '4', '8', '5', '7',\n",
       "        '3', '8', '2', '9', '1', '9', '6', '7', '2', '2', '1', '8', '5',\n",
       "        '9', '1', '0', '9', '2', '8', '5', '3', '4', '0', '3', '4', '4',\n",
       "        '4', '3', '0', '2', '8', '5', '3', '2', '0', '8', '2', '9', '0',\n",
       "        '8', '3', '7', '0', '5', '8', '9', '3', '2', '5', '5', '1', '4',\n",
       "        '2', '7', '4', '1', '0', '8', '1', '6', '9', '8', '8', '4', '2',\n",
       "        '4', '0', '9', '2', '0', '7', '0', '3', '0', '6', '4', '4', '4',\n",
       "        '9', '2', '4', '2', '8', '6', '9', '6', '5', '5', '2', '7', '0',\n",
       "        '7', '0', '5', '0', '0', '9', '6', '6', '4', '7', '9', '4', '2',\n",
       "        '7', '4', '9', '3', '8', '8', '7', '1', '5', '3', '5', '5', '4',\n",
       "        '1', '0', '9', '9', '0', '5', '1', '6', '6', '9', '7', '2', '1',\n",
       "        '4', '8', '7', '1', '4', '8', '9', '2', '3', '8', '1', '6', '3',\n",
       "        '1', '2', '8', '3', '4', '0', '1', '8', '8', '4', '2', '8', '1',\n",
       "        '2', '3', '2', '7', '7', '3', '3', '6', '3', '1', '8', '4', '7',\n",
       "        '2', '3', '4', '6', '9', '7', '8', '8', '1', '5', '1', '3', '2',\n",
       "        '8', '0', '5', '4', '9', '6', '9', '6', '7', '0', '9', '4', '5',\n",
       "        '0', '9', '1', '3', '1', '1', '5', '9', '2', '9', '1', '9', '3',\n",
       "        '4', '7', '5', '0', '9', '4', '7', '7', '1', '0', '6', '2', '5',\n",
       "        '7', '9', '1', '7', '0', '4', '0', '7', '0', '2', '8', '5', '0',\n",
       "        '0', '5', '6', '9', '2', '2', '2', '5', '1', '4', '1', '0', '6',\n",
       "        '9', '6', '1', '4', '2', '3', '6', '5', '3', '6', '7', '0', '7',\n",
       "        '7', '3', '2', '9', '9', '8', '8', '5', '1', '7', '2', '1', '5',\n",
       "        '7', '1', '1', '6', '7', '5', '4', '9', '4', '9', '2', '9', '3',\n",
       "        '1', '6', '3', '0', '6', '7', '9', '1', '8', '5', '0', '8', '1',\n",
       "        '0', '8', '8', '6', '6', '1', '2', '4', '4', '5', '6', '0', '7',\n",
       "        '1', '1', '3', '5', '1', '3', '8', '2', '7', '4', '3', '9', '4',\n",
       "        '3', '3', '3', '0', '5', '7', '8', '6', '2', '2', '8', '2', '2',\n",
       "        '4', '5', '2', '6', '7', '2', '0', '9', '1', '8', '7', '4', '0',\n",
       "        '7', '5', '3', '2', '1', '0', '1', '7', '4', '3', '0', '4', '7',\n",
       "        '1', '8', '1', '8', '3', '7', '3', '6', '3', '5', '6', '6', '0',\n",
       "        '6', '3', '7', '0', '0', '2', '0', '3', '1', '8', '5', '6', '2',\n",
       "        '0', '9', '3', '6', '8', '7', '0', '0', '1', '2', '6', '6', '4',\n",
       "        '5', '3', '3', '5', '5', '2', '3', '2', '6', '9', '0', '4', '5',\n",
       "        '9', '9', '8', '7', '0', '4', '2', '5', '7', '5', '8', '0', '2',\n",
       "        '0', '8', '9', '3', '8', '2', '7', '2', '6', '2', '0', '1', '9',\n",
       "        '4', '9', '7', '7', '7', '1', '3', '4', '1', '8', '6', '4', '2',\n",
       "        '6', '7', '3', '1', '7', '3', '3', '1', '3', '9', '3']],\n",
       "      dtype='<U1')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time my_clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3.53 s, sys: 313 ms, total: 3.85 s\n",
      "Wall time: 2.41 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0., 1., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 1.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 1.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time clf.predict_proba(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 41.1 s, sys: 952 ms, total: 42 s\n",
      "Wall time: 42.7 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0., 1., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 1.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 1.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time my_clf.predict_proba(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9714285714285714"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/scipy/stats/stats.py:248: RuntimeWarning: The input array could not be properly checked for nan values. nan values will be ignored.\n",
      "  \"values. nan values will be ignored.\", RuntimeWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9714285714285714"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_clf.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = KNeighborsClassifier(n_neighbors=2, algorithm='kd_tree')\n",
    "my_clf = MyKNeighborsClassifier(n_neighbors=2, algorithm='kd_tree')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(mnist.data, mnist.target, test_size=0.01, stratify=mnist.target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 37.8 s, sys: 352 ms, total: 38.1 s\n",
      "Wall time: 38.5 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='kd_tree', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=None, n_neighbors=2, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 22.5 s, sys: 25.1 s, total: 47.6 s\n",
      "Wall time: 52.6 s\n"
     ]
    }
   ],
   "source": [
    "%time my_clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 57.9 s, sys: 488 ms, total: 58.4 s\n",
      "Wall time: 59.4 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array(['1', '4', '4', '1', '3', '1', '7', '7', '0', '8', '8', '4', '7',\n",
       "       '8', '7', '4', '1', '5', '6', '2', '4', '6', '4', '6', '8', '9',\n",
       "       '0', '4', '3', '1', '4', '4', '1', '4', '2', '5', '0', '1', '6',\n",
       "       '6', '6', '0', '5', '4', '3', '3', '3', '5', '3', '5', '9', '4',\n",
       "       '6', '2', '2', '9', '7', '2', '4', '0', '8', '0', '1', '1', '6',\n",
       "       '0', '9', '5', '2', '2', '8', '8', '7', '1', '9', '3', '1', '2',\n",
       "       '2', '7', '5', '3', '8', '8', '7', '9', '2', '8', '4', '2', '7',\n",
       "       '2', '9', '7', '7', '6', '0', '9', '1', '9', '4', '4', '1', '1',\n",
       "       '4', '1', '8', '2', '5', '1', '9', '0', '6', '6', '4', '0', '3',\n",
       "       '1', '3', '0', '9', '0', '0', '1', '9', '7', '3', '6', '9', '2',\n",
       "       '4', '3', '2', '2', '3', '7', '1', '6', '0', '6', '7', '7', '7',\n",
       "       '0', '0', '6', '7', '6', '4', '9', '2', '5', '7', '0', '9', '9',\n",
       "       '1', '3', '1', '0', '7', '4', '1', '2', '7', '9', '6', '7', '8',\n",
       "       '1', '5', '8', '6', '7', '9', '9', '0', '9', '3', '1', '4', '7',\n",
       "       '2', '2', '5', '8', '8', '2', '0', '0', '0', '1', '8', '7', '3',\n",
       "       '5', '6', '2', '5', '6', '1', '9', '3', '4', '4', '6', '0', '5',\n",
       "       '9', '3', '0', '0', '5', '7', '1', '3', '3', '3', '7', '8', '0',\n",
       "       '8', '5', '1', '9', '2', '6', '8', '7', '2', '3', '3', '0', '7',\n",
       "       '1', '5', '3', '0', '3', '5', '1', '3', '9', '6', '5', '9', '6',\n",
       "       '2', '1', '2', '4', '7', '3', '8', '5', '4', '1', '8', '1', '7',\n",
       "       '3', '1', '4', '3', '5', '7', '1', '8', '8', '1', '6', '9', '5',\n",
       "       '2', '1', '7', '1', '0', '3', '2', '8', '6', '1', '4', '5', '2',\n",
       "       '2', '1', '8', '5', '7', '8', '3', '9', '8', '0', '2', '1', '8',\n",
       "       '4', '4', '9', '8', '1', '5', '5', '1', '0', '7', '8', '2', '6',\n",
       "       '1', '2', '2', '8', '7', '9', '6', '6', '8', '4', '0', '7', '0',\n",
       "       '4', '5', '3', '5', '9', '6', '8', '0', '6', '2', '3', '8', '1',\n",
       "       '7', '2', '6', '3', '4', '6', '4', '3', '0', '8', '3', '9', '7',\n",
       "       '6', '2', '8', '4', '6', '9', '3', '4', '6', '5', '0', '0', '8',\n",
       "       '7', '7', '9', '4', '4', '2', '9', '8', '8', '4', '8', '0', '0',\n",
       "       '4', '7', '9', '8', '2', '1', '9', '5', '9', '8', '6', '7', '6',\n",
       "       '9', '0', '0', '0', '9', '7', '7', '1', '0', '5', '8', '2', '7',\n",
       "       '6', '7', '7', '1', '6', '2', '3', '1', '3', '1', '5', '7', '1',\n",
       "       '6', '6', '5', '0', '3', '9', '6', '7', '4', '4', '1', '9', '6',\n",
       "       '1', '2', '1', '1', '1', '3', '0', '0', '6', '3', '3', '9', '6',\n",
       "       '3', '6', '0', '9', '1', '9', '8', '2', '5', '4', '5', '3', '8',\n",
       "       '2', '0', '0', '6', '5', '4', '0', '7', '1', '7', '1', '4', '9',\n",
       "       '8', '5', '6', '5', '3', '3', '1', '9', '8', '5', '6', '1', '7',\n",
       "       '1', '0', '4', '2', '7', '0', '1', '5', '4', '5', '0', '2', '9',\n",
       "       '8', '6', '8', '1', '6', '3', '7', '0', '9', '2', '3', '9', '7',\n",
       "       '7', '0', '7', '6', '2', '5', '4', '3', '5', '4', '2', '8', '7',\n",
       "       '0', '0', '0', '1', '4', '5', '4', '7', '6', '8', '7', '0', '2',\n",
       "       '0', '3', '9', '5', '0', '1', '3', '8', '5', '9', '6', '3', '8',\n",
       "       '8', '2', '2', '3', '7', '2', '6', '1', '1', '3', '3', '3', '5',\n",
       "       '2', '3', '9', '2', '0', '4', '7', '9', '6', '5', '1', '7', '9',\n",
       "       '3', '0', '4', '1', '4', '1', '7', '0', '2', '2', '1', '1', '0',\n",
       "       '4', '2', '6', '2', '3', '4', '8', '7', '4', '9', '6', '8', '9',\n",
       "       '5', '7', '9', '1', '3', '3', '2', '2', '0', '7', '3', '8', '0',\n",
       "       '9', '1', '9', '6', '6', '2', '6', '0', '5', '9', '1', '7', '9',\n",
       "       '5', '4', '3', '6', '2', '7', '3', '8', '2', '7', '4', '0', '4',\n",
       "       '3', '1', '1', '9', '1', '5', '9', '3', '3', '4', '9', '8', '7',\n",
       "       '9', '9', '9', '5', '2', '9', '6', '9', '0', '2', '3', '2', '8',\n",
       "       '4', '8', '8', '1', '1', '4', '8', '9', '2', '1', '6', '0', '3',\n",
       "       '7', '6', '5', '1', '9', '5', '5', '5', '5', '9', '4', '4', '5',\n",
       "       '3', '4', '5', '4', '3', '6', '7', '8', '5', '6', '0'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%time my_clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%time clf.predict_proba(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%time my_clf.predict_proba(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_clf.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# seaborn\n",
    "# outofthebox решение для визуализации данных построенное на matplotlib\n",
    "\n",
    "# matplotlib\n",
    "# библиотека для визуализации данных\n",
    "\n",
    "# train_test_split\n",
    "# разбивает входные данные на train и test подмножества\n",
    "\n",
    "# Pipelin%load_ext e (from sklearn.pipeline import Pipeline)\n",
    "# нужна для того чтобы последовательно обработать данные разными алгоритмами,\n",
    "# задавая им различные параматры и проверить на кросс валидации\n",
    "\n",
    "# StandardScaler (from sklearn.preprocessing import StandardScaler)\n",
    "# нужен для того чтобы нормировать фичи перед тем как использовать на них алгоритмы\n",
    "\n",
    "# ClassifierMixin\n",
    "# mixin класс для скоринговых классов\n",
    "\n",
    "# NeighborsBase\n",
    "# mixin для выбора оптимального алгоритма поиска ближайших соседей\n",
    "\n",
    "# KNeighborsMixin\n",
    "# mixin для с brute алгоритмом\n",
    "\n",
    "# SupervisedIntegerMixin\n",
    "# проверяет параметры fit и вызывает настоящую функцию"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
